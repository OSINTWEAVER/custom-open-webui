#!/bin/bash

# OSINT Open WebUI Platform Status
# Quick health check and status overview

echo "üîç OSINT Open WebUI Platform Status"
echo "=================================="
echo ""

# Check if .env exists
if [ -f .env ]; then
    echo "‚úÖ Environment file: .env exists"
    
    # Load environment variables
    source .env
    
    # Check key configurations
    echo "üîß Configuration:"
    echo "   ‚Ä¢ Ollama URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}"
    echo "   ‚Ä¢ LiteLLM Key: ${LITELLM_MASTER_KEY:+[SET]}${LITELLM_MASTER_KEY:-[NOT SET]}"
    echo "   ‚Ä¢ SearXNG Key: ${SEARXNG_SECRET_KEY:+[SET]}${SEARXNG_SECRET_KEY:-[NOT SET]}"
    echo ""
else
    echo "‚ùå Environment file: .env missing (copy from .env.example)"
    echo ""
fi

# Check Docker status
if command -v docker >/dev/null 2>&1; then
    echo "‚úÖ Docker: Available"
    
    if docker compose version >/dev/null 2>&1; then
        echo "‚úÖ Docker Compose: Available"
    elif docker-compose --version >/dev/null 2>&1; then
        echo "‚úÖ Docker Compose: Available (legacy)"
    else
        echo "‚ùå Docker Compose: Not found"
    fi
else
    echo "‚ùå Docker: Not found"
fi

echo ""

# Check running services
echo "üê≥ Service Status:"
if docker compose ps >/dev/null 2>&1; then
    docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
else
    echo "   No services running or docker-compose not available"
fi

echo ""

# Check external Ollama connectivity
echo "ü§ñ External Ollama Status:"
OLLAMA_URL="${OLLAMA_BASE_URL:-http://host.docker.internal:11434}"
if command -v curl >/dev/null 2>&1; then
    if curl -s "${OLLAMA_URL}/api/tags" >/dev/null 2>&1; then
        echo "‚úÖ Ollama server: Accessible at $OLLAMA_URL"
        
        # Check for recommended models
        echo "üì¶ Model Status:"
        MODELS=$(curl -s "${OLLAMA_URL}/api/tags" 2>/dev/null || echo '{"models":[]}')
        
        if echo "$MODELS" | grep -q "gemma3:12b-it-q8_0"; then
            echo "   ‚úÖ Gemma 3 12B (Primary): Available"
        else
            echo "   ‚ùå Gemma 3 12B (Primary): Not found - run ./setup-models.sh"
        fi
        
        if echo "$MODELS" | grep -q "snowflake-arctic-embed2"; then
            echo "   ‚úÖ Arctic Embeddings: Available"
        else
            echo "   ‚ùå Arctic Embeddings: Not found - run ./setup-models.sh"
        fi
        
        # Get total model count
        MODEL_COUNT=$(echo "$MODELS" | grep -o '"name"' | wc -l 2>/dev/null || echo "0")
        echo "   ÔøΩ Total models: $MODEL_COUNT"
    else
        echo "‚ùå Ollama server: Cannot connect to $OLLAMA_URL"
        echo "   ‚Ä¢ Check if Ollama is running"
        echo "   ‚Ä¢ Verify OLLAMA_BASE_URL in .env"
        echo "   ‚Ä¢ Test with: curl ${OLLAMA_URL}/api/tags"
    fi
else
    echo "‚ö†Ô∏è  curl not available - cannot test Ollama connectivity"
fi

echo ""

# Service URLs
echo "üåê Access URLs:"
echo "   ‚Ä¢ Open WebUI (OSINT): http://localhost:3000"
echo "   ‚Ä¢ SearXNG (Search): http://localhost:8080"
echo "   ‚Ä¢ LiteLLM Proxy: http://localhost:4000"
echo "   ‚Ä¢ Tika Server: http://localhost:9998"
echo ""

# Check templates
echo "üìã Template Status:"
if [ -f "process-templates.sh" ]; then
    echo "‚úÖ Template processor: Available"
    
    if [ -f "open-webui-litellm-config/config.yaml" ]; then
        echo "‚úÖ LiteLLM config: Generated"
    else
        echo "‚ö†Ô∏è  LiteLLM config: Not generated (run ./process-templates.sh)"
    fi
    
    if [ -f "searxng/settings.yml" ]; then
        echo "‚úÖ SearXNG config: Generated"
    else
        echo "‚ö†Ô∏è  SearXNG config: Not generated (run ./process-templates.sh)"
    fi
else
    echo "‚ùå Template processor: Missing"
fi

echo ""

# Quick commands
echo "üîß Quick Commands:"
echo "   ‚Ä¢ Setup models: ./setup-models.sh"
echo "   ‚Ä¢ Start services: docker compose up -d"
echo "   ‚Ä¢ Stop services: docker compose down"
echo "   ‚Ä¢ View logs: docker compose logs -f"
echo "   ‚Ä¢ Process templates: ./process-templates.sh"
echo "   ‚Ä¢ Test Ollama: ./test-ollama.sh"
echo ""

echo "üìñ Documentation: See README.md for complete setup guide"
